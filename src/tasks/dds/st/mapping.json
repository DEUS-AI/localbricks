{
    "dataMappings": {
        "openIdFunctionExpression": "base64.b64encode(f'ST#{str(data.vehicle)}:::{str(int(data.imo))}:::{data.report_date.strftime(\"%Y-%m-%d\")}'.encode('utf-8')).decode('utf-8')",
        "planificationRotaFields": [],
        "calculableBehaviours": [
            "Efficient_Auxiliary_Engine_Use",
            "Optimal_Trim",
            "Efficient_Power_Management",
            "Engine_Maintenance_Optimisation"
        ],
        "dateFormat": [
            "%d/%m/%Y",
            "%Y-%m-%d"
        ],
        "domain": "maritime",
        "join_keys": ["vehicle", "imo", "report_date"],
        "csvFields": [
            {
                "name": "event_id",
                "type": "string",
                "options": [],
                "eventType": "*"
            },
            {
                "name": "event_openid",
                "type": "string",
                "options": [
                    "openid"
                ],
                "eventType": "*"
            },
            {
                "name": "dds_code",
                "type": "string",
                "options": [],
                "eventType": "*"
            },
            {
                "name": "dds_name",
                "type": "string",
                "options": [],
                "eventType": "*"
            },
            {
                "name": "operator_id",
                "type": "string",
                "options": [
                    "cpt id"
                ],
                "eventType": "*"
            },
            {
                "name": "operator_id2",
                "type": "string",
                "options": [
                    "cheng id"
                ],
                "eventType": "*"
            },
            {
                "name": "operator_secondary_code",
                "type": "string",
                "options": [
                    "cpt doc no"
                ],
                "regex": "^[0]*|[\\-\\s]",
                "eventType": "*"
            },
            {
                "name": "operator_secondary_code2",
                "type": "string",
                "options": [
                    "cheng doc no"
                ],
                "regex": "^[0]*|[\\-\\s]",
                "eventType": "*"
            },
            {
                "name": "operator_name",
                "type": "string",
                "options": [
                    "cpt fullname"
                ],
                "eventType": "*"
            },
            {
                "name": "operator_name2",
                "type": "string",
                "options": [
                    "cheng fullname"
                ],
                "eventType": "*"
            },
            {
                "name": "role_alias",
                "type": "string",
                "options": [],
                "eventType": "SHIPPING",
                "default_value": "Captain"
            },
            {
                "name": "role_alias2",
                "type": "string",
                "options": [],
                "eventType": "SHIPPING",
                "default_value": "Chief Engineer"
            },
            {
                "name": "identifier",
                "type": "string",
                "options": [
                    "dimvoyageid",
                    "dimshipid"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "vehicle",
                "type": "string",
                "options": [
                    "shipname"
                ],
                "required": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "imo",
                "type": "string",
                "options": [],
                "state": {
                    "STOLT NORLAND": 9414060,
                    "STOLT CREATIVITY": 9102095,
                    "STOLT BRELAND": 9414084,
                    "STOLT ACHIEVEMENT": 9124469,
                    "STOLT EFFORT": 9178202,
                    "STOLT TENACITY": 9680102,
                    "STOLT CONCEPT": 9178197
                },
                "formula": "data['imo'] = None\nimos = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\timos.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\timos.append(None)\n\texcept Exception as e:\n\t\timos.append(None)\ndata['imo'] = imos",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "origin",
                "type": "string",
                "options": [
                    "voyagelegfromportname"
                ],
                "eventType": "SHIPPING",
                "formula": "data['origin'] = np.where(data['origin'].str.len() >= 3, data['origin'], None)"
            },
            {
                "name": "destination",
                "type": "string",
                "options": [
                    "voyagelegtoportname"
                ],
                "eventType": "SHIPPING",
                "formula": "data['destination'] = np.where(data['destination'].str.len() >= 3, data['destination'], None)"
            },
            {
                "name": "report_date",
                "type": "date",
                "options": [
                    "dimreportdateid",
                    "reportdate"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "report_seconds_since_midnight",
                "type": "number",
                "options": [
                    "dimreporttimeid"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "arrival_datetime",
                "type": "date",
                "options": [],
                "state": {},
                "formula": "data['arrival_datetime'] = pd.to_datetime(data['report_date'])",
                "eventType": "SHIPPING"
            },
            {
                "name": "eta_next_port",
                "type": "date",
                "options": [
                    "etanextport"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "voyage_time_hs",
                "type": "number",
                "options": [
                    "reportingperiod",
                    "reporting period"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "ocurrence_datetime",
                "type": "date",
                "options": [],
                "state": {},
                "formula": "data['ocurrence_datetime'] = pd.to_datetime(data['arrival_datetime']) - pd.to_timedelta(1, unit='d')",
                "eventType": "SHIPPING"
            },
            {
                "name": "speedthroughwatermehrs",
                "type": "number",
                "options": [
                    "speedthroughwatermehrs"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "observeddistance",
                "type": "number",
                "options": [
                    "observeddistance"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "auxenginesfoc",
                "type": "number",
                "options": [
                    "auxenginesfoc"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "total_propulsion_consumption",
                "type": "number",
                "options": [
                    "totalpropulsionconsumption"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "total_generator_consumption",
                "type": "number",
                "options": [
                    "totalgeneratorconsumption"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "total_propulsion_consumption_new",
                "type": "number",
                "options": [
                    "totalpropulsionconsumptionnew"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "total_generator_consumption_new",
                "type": "number",
                "options": [
                    "totalgeneratorconsumptionnew"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "generator_energy_hourly_avg_1",
                "type": "number",
                "options": [
                    "generator1kwhrs"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "generator_energy_hourly_avg_2",
                "type": "number",
                "options": [
                    "generator2kwhrs"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "generator_energy_hourly_avg_3",
                "type": "number",
                "options": [
                    "generator3kwhrs"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "generator_energy_hourly_avg_4",
                "type": "number",
                "options": [
                    "generator4kwhrs"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "generator_1_running_hours",
                "type": "number",
                "options": [
                    "generator1runninghours"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "generator_2_running_hours",
                "type": "number",
                "options": [
                    "generator2runninghours"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "generator_3_running_hours",
                "type": "number",
                "options": [
                    "generator3runninghours"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "generator_4_running_hours",
                "type": "number",
                "options": [
                    "generator4runninghours"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "tank_cleaning_consumption_ifo",
                "type": "number",
                "options": [
                    "tankcleaningconsumptionifo"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "tank_cleaning_consumption_mgo",
                "type": "number",
                "options": [
                    "tankcleaningconsumptionmgo"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "tank_cleaning_consumption_lsf",
                "type": "number",
                "options": [
                    "tankcleaningconsumptionlsf"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "tank_cleaning_consumption_mdo",
                "type": "number",
                "options": [
                    "tankcleaningconsumptionmdo"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "bad_weather_distance",
                "type": "number",
                "options": [
                    "badweatherdistance"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "bad_weather_hours",
                "type": "number",
                "options": [
                    "badweatherhours"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "beaufort",
                "type": "number",
                "options": [
                    "beaufort"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "sea_direction_degree",
                "type": "number",
                "options": [
                    "seadirectiondegree"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "sea_direction",
                "type": "number",
                "options": [
                    "seadirection"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "sea_height",
                "type": "number",
                "options": [
                    "seaheight"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "sea_number",
                "type": "number",
                "options": [
                    "seanumber"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "swell_direction_degree",
                "type": "number",
                "options": [
                    "swelldirectiondegree"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "swell_direction",
                "type": "number",
                "options": [
                    "swelldirection"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "swell_height",
                "type": "number",
                "options": [
                    "swellheight"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "swell_number",
                "type": "number",
                "options": [
                    "swellnumber"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "sea_temperature",
                "type": "number",
                "options": [
                    "seatemprature"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "heading_direction",
                "type": "number",
                "options": [
                    "headingdirection"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "heading_degree",
                "type": "number",
                "options": [
                    "headingdegree"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "wind_direction_degree",
                "type": "number",
                "options": [
                    "winddirectiondegree"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "aeu",
                "type": "number",
                "options": [
                    "aeu"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "aux_engine1_max_load",
                "type": "number",
                "options": [],
                "state": {
                    "STOLT NORLAND": 1400,
                    "STOLT CREATIVITY": 2430,
                    "STOLT BRELAND": 1400,
                    "STOLT ACHIEVEMENT": 2430,
                    "STOLT EFFORT": 2430,
                    "STOLT TENACITY": 1055,
                    "STOLT CONCEPT": 2430
                },
                "formula": "data['aux_engine1_max_load'] = None\nloads = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\tloads.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tloads.append(None)\n\texcept Exception as e:\n\t\tloads.append(None)\ndata['aux_engine1_max_load'] = loads",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "aux_engine1_min_load",
                "type": "number",
                "options": [],
                "state": {
                    "STOLT NORLAND": 110,
                    "STOLT CREATIVITY": 350,
                    "STOLT BRELAND": 110,
                    "STOLT ACHIEVEMENT": 350,
                    "STOLT EFFORT": 350,
                    "STOLT TENACITY": 120,
                    "STOLT CONCEPT": 350
                },
                "formula": "data['aux_engine1_min_load'] = None\nloads = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\tloads.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tloads.append(None)\n\texcept Exception as e:\n\t\tloads.append(None)\ndata['aux_engine1_min_load'] = loads",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "aux_engine2_max_load",
                "type": "number",
                "options": [],
                "state": {
                    "STOLT NORLAND": 1400,
                    "STOLT CREATIVITY": 3645,
                    "STOLT BRELAND": 1400,
                    "STOLT ACHIEVEMENT": 3645,
                    "STOLT EFFORT": 3645,
                    "STOLT TENACITY": 1055,
                    "STOLT CONCEPT": 3645
                },
                "formula": "data['aux_engine2_max_load'] = None\nloads = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\tloads.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tloads.append(None)\n\texcept Exception as e:\n\t\tloads.append(None)\ndata['aux_engine2_max_load'] = loads",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "aux_engine2_min_load",
                "type": "number",
                "options": [],
                "state": {
                    "STOLT NORLAND": 110,
                    "STOLT CREATIVITY": 350,
                    "STOLT BRELAND": 110,
                    "STOLT ACHIEVEMENT": 350,
                    "STOLT EFFORT": 350,
                    "STOLT TENACITY": 120,
                    "STOLT CONCEPT": 350
                },
                "formula": "data['aux_engine2_min_load'] = None\nloads = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\tloads.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tloads.append(None)\n\texcept Exception as e:\n\t\tloads.append(None)\ndata['aux_engine2_min_load'] = loads",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "aux_engine3_max_load",
                "type": "number",
                "options": [],
                "state": {
                    "STOLT NORLAND": 1400,
                    "STOLT CREATIVITY": 3645,
                    "STOLT BRELAND": 1400,
                    "STOLT ACHIEVEMENT": 3645,
                    "STOLT EFFORT": 3645,
                    "STOLT TENACITY": 1055,
                    "STOLT CONCEPT": 3645
                },
                "formula": "data['aux_engine3_max_load'] = None\nloads = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\tloads.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tloads.append(None)\n\texcept Exception as e:\n\t\tloads.append(None)\ndata['aux_engine3_max_load'] = loads",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "aux_engine3_min_load",
                "type": "number",
                "options": [],
                "state": {
                    "STOLT NORLAND": 110,
                    "STOLT CREATIVITY": 350,
                    "STOLT BRELAND": 110,
                    "STOLT ACHIEVEMENT": 350,
                    "STOLT EFFORT": 350,
                    "STOLT TENACITY": 120,
                    "STOLT CONCEPT": 350
                },
                "formula": "data['aux_engine3_min_load'] = None\nloads = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\tloads.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tloads.append(None)\n\texcept Exception as e:\n\t\tloads.append(None)\ndata['aux_engine3_min_load'] = loads",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "aux_engine4_max_load",
                "type": "number",
                "options": [],
                "state": {
                    "STOLT NORLAND": 1400,
                    "STOLT CREATIVITY": 3645,
                    "STOLT BRELAND": 1400,
                    "STOLT ACHIEVEMENT": 3645,
                    "STOLT EFFORT": 3645,
                    "STOLT TENACITY": 1055,
                    "STOLT CONCEPT": 3645
                },
                "formula": "data['aux_engine4_max_load'] = None\nloads = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\tloads.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tloads.append(None)\n\texcept Exception as e:\n\t\tloads.append(None)\ndata['aux_engine4_max_load'] = loads",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "aux_engine4_min_load",
                "type": "number",
                "options": [],
                "state": {
                    "STOLT NORLAND": 110,
                    "STOLT CREATIVITY": 350,
                    "STOLT BRELAND": 110,
                    "STOLT ACHIEVEMENT": 350,
                    "STOLT EFFORT": 350,
                    "STOLT TENACITY": 120,
                    "STOLT CONCEPT": 350
                },
                "formula": "data['aux_engine4_min_load'] = None\nloads = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\tloads.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tloads.append(None)\n\texcept Exception as e:\n\t\tloads.append(None)\ndata['aux_engine4_min_load'] = loads",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "aeu_lower_threshold",
                "type": "number",
                "options": [],
                "state": {
                    "STOLT NORLAND": 0.7,
                    "STOLT CREATIVITY": 0.9,
                    "STOLT BRELAND": 0.9,
                    "STOLT ACHIEVEMENT": 0.9,
                    "STOLT EFFORT": 0.9,
                    "STOLT TENACITY": 0.9,
                    "STOLT CONCEPT": 0.85
                },
                "formula": "data['aeu_lower_threshold'] = None\nlimit = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\tlimit.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tlimit.append(None)\n\texcept Exception as e:\n\t\tlimit.append(None)\ndata['aeu_lower_threshold'] = limit",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "emo_delta_fuel",
                "type": "number",
                "options": [],
                "state": {
                    "STOLT NORLAND": 10,
                    "STOLT CREATIVITY": -41,
                    "STOLT BRELAND": 22,
                    "STOLT ACHIEVEMENT": -39,
                    "STOLT EFFORT": -43,
                    "STOLT TENACITY": 17,
                    "STOLT CONCEPT": -39
                },
                "formula": "data['emo_delta_fuel'] = None\nlimit = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\tlimit.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tlimit.append(None)\n\texcept Exception as e:\n\t\tlimit.append(None)\ndata['emo_delta_fuel'] = limit",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "emo_ideal_fuel_used",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "emo_total_fuel_used",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "emo_delta_fuel_used",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "emo_max_fuel_used",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "emo_min_fuel_used",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "vessel_type",
                "type": "number",
                "options": [],
                "state": {
                    "STOLT NORLAND": "2 Stroke",
                    "STOLT CREATIVITY": "Diesel Electric",
                    "STOLT BRELAND": "2 Stroke",
                    "STOLT ACHIEVEMENT": "Diesel Electric",
                    "STOLT EFFORT": "Diesel Electric",
                    "STOLT TENACITY": "2 Stroke",
                    "STOLT CONCEPT": "Diesel Electric"
                },
                "formula": "data['vessel_type'] = None\nshipType = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor ship in state.keys():\n\t\t\tif row['vehicle'].upper() == ship.upper():\n\t\t\t\tshipType.append(state[ship])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tshipType.append(None)\n\texcept Exception as e:\n\t\tshipType.append(None)\ndata['vessel_type'] = shipType\ndata.dropna(subset=['vessel_type'], inplace=True)",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "mainenginerunninghrs",
                "type": "number",
                "options": [
                    "mainenginerunninghrs"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "main_engine_kwhrs",
                "type": "number",
                "options": [
                    "mainenginekwhrs"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "steaming_hours",
                "type": "number",
                "options": [
                    "steaminghours"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "factvoyagelegid",
                "type": "number",
                "options": [
                    "factvoyagelegid"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "islastreportvoyageleg",
                "type": "number",
                "options": [
                    "islastreportvoyageleg"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "voyagelegdurationindays",
                "type": "number",
                "options": [
                    "voyagelegdurationindays"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "aftdraft",
                "type": "number",
                "options": [
                    "aftdraft"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "fwddraft",
                "type": "number",
                "options": [
                    "fwddraft"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "meandraft",
                "type": "number",
                "options": [
                    "meandraft"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "trim",
                "type": "number",
                "options": [
                    "trimreported"
                ],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "trimoptimal",
                "type": "number",
                "options": [
                    "trimoptimal"
                ],
                "eventType": "SHIPPING"
            },
            {
                "name": "trim_ideal",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "trim_perc_actual",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "trim_perc_limit",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "total_hours",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "fuel_consumption_perfect_trim",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "fuel_consumption_actual_trim",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "total_good_hours",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "overproduced_hours",
                "type": "number",
                "options": [],
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "epm_success",
                "type": "number",
                "options": [],
                "eventType": "SHIPPING"
            },
            {
                "name": "epm_fuel_saved",
                "type": "number",
                "options": [],
                "eventType": "SHIPPING"
            },
            {
                "name": "epm_best_fuel_saved",
                "type": "number",
                "options": [],
                "eventType": "SHIPPING"
            },
            {
                "name": "vehicle_email_operator1",
                "type": "string",
                "options": [],
                "state": {
                    "STOLT NORLAND": "master.snorl@stolt.com",
                    "STOLT CREATIVITY": "master.screa@stolt.com",
                    "STOLT BRELAND": "master.sbrel@stolt.com",
                    "STOLT ACHIEVEMENT": "master.sachi@stolt.com",
                    "STOLT EFFORT": "master.seffo@stolt.com",
                    "STOLT TENACITY": "master.stena@stolt.com",
                    "STOLT CONCEPT": "master.sconc@stolt.com"
                },
                "formula": "data['vehicle_email_operator1'] = None\nemails = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor tug in state.keys():\n\t\t\tif row['vehicle'].upper() == tug.upper():\n\t\t\t\temails.append(state[tug])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\temails.append(None)\n\texcept Exception as e:\n\t\temails.append(None)\ndata['vehicle_email_operator1'] = emails",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "vehicle_email_operator2",
                "type": "string",
                "options": [],
                "state": {
                    "STOLT NORLAND": "cheng.snorl@stolt.com",
                    "STOLT CREATIVITY": "cheng.screa@stolt.com",
                    "STOLT BRELAND": "cheng.sbrel@stolt.com",
                    "STOLT ACHIEVEMENT": "cheng.sachi@stolt.com",
                    "STOLT EFFORT": "cheng.seffo@stolt.com",
                    "STOLT TENACITY": "cheng.stena@stolt.com",
                    "STOLT CONCEPT": "cheng.sconc@stolt.com"
                },
                "formula": "data['vehicle_email_operator2'] = None\nemails = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor tug in state.keys():\n\t\t\tif row['vehicle'].upper() == tug.upper():\n\t\t\t\temails.append(state[tug])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\temails.append(None)\n\texcept Exception as e:\n\t\temails.append(None)\ndata['vehicle_email_operator2'] = emails",
                "is_metadata": true,
                "eventType": "SHIPPING"
            },
            {
                "name": "team_name",
                "type": "string",
                "options": [],
                "state": {
                    "STOLT NORLAND": "STDefaultTeam",
                    "STOLT CREATIVITY": "STDefaultTeam",
                    "STOLT BRELAND": "STDefaultTeam",
                    "STOLT ACHIEVEMENT": "STDefaultTeam",
                    "STOLT EFFORT": "STDefaultTeam",
                    "STOLT TENACITY": "STDefaultTeam",
                    "STOLT CONCEPT": "STDefaultTeam"
                },
                "formula": "data['team_name'] = None\nteams = []\nfor index, row in data.iterrows():\n\ttry:\n\t\tfound = False\n\t\tfor tug in state.keys():\n\t\t\tif row['vehicle'].upper() == tug.upper():\n\t\t\t\tteams.append(state[tug])\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tteams.append(None)\n\texcept Exception as e:\n\t\tteams.append(None)\ndata['team_name'] = teams",
                "eventType": "SHIPPING"
            },
            {
                "name": "constant_eaeu_eta",
                "type": "number",
                "options": [],
                "eventType": "SHIPPING",
                "is_metadata": true,
                "default_value": 0.96
            },
            {
                "name": "constant_eaeu_const",
                "type": "number",
                "options": [],
                "eventType": "SHIPPING",
                "is_metadata": true,
                "default_value": 0.8
            }
        ]
    }
}